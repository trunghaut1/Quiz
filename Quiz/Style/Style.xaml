<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing">

    <Style TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
    </Style>

    <Style TargetType="{x:Type ed:Arc}">
        <Setter Property="Stroke" Value="{DynamicResource MainColor}"/>
    </Style>

    <Style x:Key="PointBorder" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource MainColor}"/>
        <Setter Property="CornerRadius" Value="5"/>
    </Style>

    <Style TargetType="{x:Type Ellipse}">
        <Setter Property="Fill" Value="{DynamicResource MainColor}"/>
    </Style>

    <Style x:Key="btnMain" TargetType="{x:Type Button}">
        <Setter Property="BorderBrush" Value="{DynamicResource MainColor}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth2}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource MainColorExtraLight}"/>
                            <Setter Property="Effect" Value="{DynamicResource MaterialDesignShadowDepth4}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderThickness" Value="2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="btnSub" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="mouseEnter">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0:0:0" Value="190"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="label">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="{x:Static Visibility.Visible}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.07"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.RelativeTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="button">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1.1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.RelativeTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="button">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1.1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="MouseLeave">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="label">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.RelativeTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="button">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1.1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.RelativeTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="button">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1.1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="grid" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="5,5,5,5">
                        <Grid.Effect>
                            <DropShadowEffect Opacity="0.01"/>
                        </Grid.Effect>
                        <Button Style="{StaticResource btnMain}" x:Name="button" HorizontalAlignment="Left" VerticalAlignment="Top" Width="{Binding Path=Width}" Height="{Binding Path=Height}">
                            <Button.Background>
                                <ImageBrush ImageSource="{Binding Path=ImgUrl}">
                                    <ImageBrush.RelativeTransform>
                                        <TransformGroup>
                                            <ScaleTransform CenterY="0.5" CenterX="0.5"/>
                                            <SkewTransform CenterY="0.5" CenterX="0.5"/>
                                            <RotateTransform CenterY="0.5" CenterX="0.5"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </ImageBrush.RelativeTransform>
                                </ImageBrush>
                            </Button.Background>
                        </Button>
                        <Rectangle HorizontalAlignment="Left" VerticalAlignment="Bottom" Width="{Binding Path=Width}" Height="30" IsHitTestVisible="False" Margin="1 0 0 1">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <LinearGradientBrush.RelativeTransform>
                                        <TransformGroup>
                                            <ScaleTransform CenterY="0.5" CenterX="0.5"/>
                                            <SkewTransform CenterY="0.5" CenterX="0.5"/>
                                            <RotateTransform Angle="-90" CenterY="0.5" CenterX="0.5"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </LinearGradientBrush.RelativeTransform>
                                    <GradientStop Color="#263238"/>
                                    <GradientStop Color="Transparent" Offset="1"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle x:Name="rectangle" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="1,0,0,31" RenderTransformOrigin="0.5,0.5" Visibility="Hidden" Width="{Binding Path=Width}" Height="20" IsHitTestVisible="False">
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Rectangle.RenderTransform>
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
                                    <LinearGradientBrush.RelativeTransform>
                                        <TransformGroup>
                                            <ScaleTransform CenterY="0.5" CenterX="0.5"/>
                                            <SkewTransform CenterY="0.5" CenterX="0.5"/>
                                            <RotateTransform Angle="-90" CenterY="0.5" CenterX="0.5"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </LinearGradientBrush.RelativeTransform>
                                    <GradientStop Color="#EF5350" Offset="0.177"/>
                                    <GradientStop Color="Transparent" Offset="1"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Label x:Name="label" Content="{Binding Path=Lable2}" HorizontalAlignment="Left" VerticalAlignment="Bottom" Foreground="White" FontSize="12" Width="{Binding Path=Width}" Height="25" Margin="0,0,0,30" Opacity="0" IsHitTestVisible="False"/>
                        <Label Content="{Binding Path=Lable1}" HorizontalAlignment="Left" VerticalAlignment="Bottom" Foreground="White" FontSize="15" Width="{Binding Path=Width}" Height="30" IsHitTestVisible="False"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter" SourceName="button">
                            <BeginStoryboard Storyboard="{StaticResource mouseEnter}">
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave" SourceName="button">
                            <BeginStoryboard Storyboard="{StaticResource MouseLeave}">
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="btnNotAnswer" TargetType="{x:Type Button}" BasedOn="{StaticResource CircleButton}">
        <Setter Property="Background" Value="{DynamicResource MainColorLight}"/>
    </Style>
    <Style x:Key="btnAnswered" TargetType="{x:Type Button}" BasedOn="{StaticResource CircleButton}">
        <Setter Property="Background" Value="{DynamicResource MainColorExtraLight}"/>
    </Style>
    <Style x:Key="btnAnswerWrong" TargetType="{x:Type Button}" BasedOn="{StaticResource CircleButton}">
        <Setter Property="Background" Value="{DynamicResource ErrorColor}"/>
    </Style>
    <Style x:Key="btnAnswerCorrect" TargetType="{x:Type Button}" BasedOn="{StaticResource CircleButton}">
        <Setter Property="Background" Value="{DynamicResource MainColorDark}"/>
    </Style>
    <Style x:Key="btnAnswerWrongBookMark" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#F44336"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="12" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <Grid>
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                            <Rectangle Margin="36,0,0,20">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="/Images/bookmark.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#D32F2F"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#B71C1C"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnAnswerCorrectBookMark" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#64FFDA"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="12" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <Grid>
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                            <Rectangle Margin="36,0,0,20">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="/Images/bookmark.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#1DE9B6"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#00BFA5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnNotAnswerBookMark" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#D1C4E9"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="12" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <Grid>
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                            <Rectangle Margin="36,0,0,20">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="/Images/bookmark.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#9575CD"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#5E35B1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnAnsweredBookMark" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#9FA8DA"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="12" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <Grid>
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                            <Rectangle Margin="36,0,0,20">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="/Images/bookmark.png"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#3F51B5"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#283593"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="radioBCorrect" TargetType="RadioButton" BasedOn="{StaticResource FlatRadioButtonWithColor}">
        <Setter Property="Foreground" Value="{DynamicResource MainColor}"/>
    </Style>
    <Style x:Key="radioBWrong" TargetType="RadioButton" BasedOn="{StaticResource FlatRadioButtonWithColor}">
        <Setter Property="Foreground" Value="{DynamicResource ErrorColor}"/>
    </Style>

</ResourceDictionary>